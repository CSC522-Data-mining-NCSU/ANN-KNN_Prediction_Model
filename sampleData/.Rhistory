demo()
q()
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("slidify")
search()
library(ggplot2)
install.packages(ggplot2)
find.package("devtools")
install.packages("devtools")
library(devtools)
find.package("devtools")
getwd()
for (i in 1:10){}
for (i in 1:4){ print(i)}
z <- 5
while (z>=3 && z<=10){print(z); coin<-rbinom(1,1,0.5)}
log(-1)
getwd()
mean(x)
traceback()
debug(lm)
lm(y-x)
library(datasets)
data("iris")
?iris
iris
iris[["Species"]]
good <- iris[["Species"]]="virginica"
good <- iris[["Species"]]=="virginica"
good
iris$Sepal.Length[good,]
iris$Sepal.Length[good]
mean(iris$Sepal.Length[good])
apply(iris,good,mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris,3,mean)
apply(iris$Sepal.Length[good],2,mean)
apply(iris$Sepal.Length,2,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:5],2,mean)
apply(iris[,1:4],2,mean)
apply(iris[good,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$carb,mean)
mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl==4,mean)
tapply(mtcars$mpg,mtcars$cyl==8,mean)
tapply(mtcars$mpg,mtcars$cyl==8||mtcars$cyl==4,mean)
tapply(mtcars$mpg,mtcars$cyl==8|mtcars$cyl==4,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
15.1-26.66364
debug(ls)
ls
ls(he)
n
n
iris
irs
iris
iris
tapply(iris$Sepal.Length,iris$Species,mean)
split(mtcars,mtcars$cyl)
q
Q
Q
Q
Q
Q
Q
n
Q
Q
Q
Q
Q
Q
Q
Q
swirl()
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 < 7
10<=10
5!=7
!5 == !7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(int>0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(mean,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is"k, "fun!")
paste("Programming","is", "fun!")
submit()
telegram("I love the world")
submit()
mad_libs(place="Raleigh",adjective="energetic",noun="computers")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list,calss)
sapply(cls_list,class)
cls_vect <- sapply(cls_list,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- falgs[,19:23]
flag_shapes <- flags[,19:23]
range(flag_shapes)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail()
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(1,0),100,replace = TRUE,c(0.3,0.7))
flips <- sample(c(1,0),100,replace = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10,mean = 100, sd=25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-strptim("October 17, 1986 08:24")
t3<-strptime("October 17, 1986 08:24")
t3<-strptime("October 17, 1986 08:24",format = (YYYY-MM-DD))
t3<-strptime("October 17, 1986 08:24",format = (YYYY-MM-DD))
t3
t2
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H %M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
dim(cars)
names(cars)
summary(cars)
str(cars)
plot(cars)
?plot()
?plot
plot(x= cars$speed, y = cars$dist)
plot(dist~speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x=cars$speed, y = cars$dist)
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed" , ylab = "Stopping Distance")
plot(cars,main("My Plot"))
plot(cars,main())
plot(cars, main ="My Plot")
plot(cars, sub ="My Plot Subtitle")
plot(cars, col=2)
plot(cars,xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl
)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
data <- read.csv("hw1q6.csv")
setwd("~/Documents/NCSU/Online/Data Analysis and Statistical Inference/Lab”)
;
q
q
`
q()
quit()
library(nnet)
setwd("~/Documents/NCSU/2015 Fall/CSC 522 Data Analysis/project/ANN_Prediction_Model/sampleData")
X_train = read.csv("X_train.csv")
Y_train = read.csv("Y_train.csv")
ANN = nnet(X_train,Y_train,size = 20,softmax = TRUE)
ANN = nnet(X_train,Y_train,size = 20)
pre = predict(ANN,X_train,type = "class")
pre = predict(ANN,X_train)
View(pre)
View(pre)
table(pre,Y_train)
?nnt
?nnet
ANN = nnet(X_train,Y_train,size = 200)
ANN = nnet(X_train,Y_train,size = 50)
pre = predict(ANN,X_train)
View(pre)
View(pre)
summary(pre)
install.packages('neuralnet')
library("neuralnet")
?neuralnet
trainingdata <- cbind(X_train,Y_train)
colnames(trainingdata) <- c("Input","Output")
View(trainingdata)
net.sqrt <- neuralnet(Y_train,X_train, hidden=10, threshold=0.01)
View(X_train)
